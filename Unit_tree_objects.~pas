unit Unit_tree_objects;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, GridsEh, DBGridEh, StdCtrls, DBCtrls, DB, OracleData, Buttons, Utils,
  Oracle, PivotCube_SRC, PivotMap_SRC, MSXML2_TLB, ComObj, Menus, frxClass,
  frxDBSet, frxDMPExport, wwdblook, Grids, Wwdbigrd, Wwdbgrid, ExtCtrls,
  OracleNavigator, ToolWin, ComCtrls, DataDriverEh, MemTableDataEh,
  abfComponents, MemTableEh, wwdbdatetimepicker, Mask, wwdbedit, Wwdotdot,
  Wwdbcomb, DBCtrlsEh;
 type
  TForm_tree_objects = class(TForm)
    DBGridEh1: TDBGridEh;
    OD_mg1: TOracleDataSet;
    OD_mg2: TOracleDataSet;
    DS_mg1: TDataSource;
    DS_mg2: TDataSource;
    OD_dat2: TOracleDataSet;
    OD_dat1: TOracleDataSet;
    OD_data: TOracleDataSet;
    DS_data: TDataSource;
    PopupMenu1: TPopupMenu;
    OD_empty: TOracleDataSet;
    N1: TMenuItem;
    OD_spk: TOracleDataSet;
    OD_level: TOracleDataSet;
    OD_levelNAME: TStringField;
    DS_org: TDataSource;
    OD_org: TOracleDataSet;
    DS_oper: TDataSource;
    OD_oper: TOracleDataSet;
    Panel1: TPanel;
    ToolBar1: TToolBar;
    Button2: TButton;
    Button3: TButton;
    Panel2: TPanel;
    OD_tree_objects: TOracleDataSet;
    OD_tree_objectsID: TFloatField;
    OD_tree_objectsMAIN_ID: TFloatField;
    OD_tree_objectsNAME: TStringField;
    OD_tree_objectsREU: TStringField;
    OD_tree_objectsKUL: TStringField;
    OD_tree_objectsND: TStringField;
    OD_tree_objectsTREST: TStringField;
    OD_tree_objectsSTREET: TStringField;
    OD_tree_objectsND1: TStringField;
    OD_tree_objectsNAME_TR: TStringField;
    OD_tree_objectsSEL: TFloatField;
    DataSetDriverEh2: TDataSetDriverEh;
    MemTableEh2: TMemTableEh;
    DS_tree_objects: TDataSource;
    abfThreadComponent1: TabfThreadComponent;
    OD_levelLEVEL_ID: TFloatField;
    OD_tree_objectsOBJ_LEVEL: TFloatField;
    Panel3: TPanel;
    DBLookupComboBox6: TDBLookupComboBox;
    Label2: TLabel;
    DBLookupComboBox5: TDBLookupComboBox;
    Label1: TLabel;
    GroupBox2: TGroupBox;
    CheckBox5: TCheckBox;
    Edit1: TEdit;
    Label7: TLabel;
    Label3: TLabel;
    Edit2: TEdit;
    Label4: TLabel;
    Edit3: TEdit;
    GroupBox1: TGroupBox;
    GroupBox5: TGroupBox;
    wwDBLookupCombo2: TwwDBLookupCombo;
    GroupBox7: TGroupBox;
    wwDBLookupCombo1: TwwDBLookupCombo;
    Splitter1: TSplitter;
    OD_org_olap: TOracleDataSet;
    OD_usl_olap: TOracleDataSet;
    OD_trest_olap: TOracleDataSet;
    OD_reu_olap: TOracleDataSet;
    OD_status_olap: TOracleDataSet;
    OD_sch_olap: TOracleDataSet;
    OD_psch_olap: TOracleDataSet;
    OD_spul_olap: TOracleDataSet;
    OD_uslm_olap: TOracleDataSet;
    OD_spr_params: TOracleDataSet;
    DS_spr_params: TDataSource;
    wwDBGrid1: TwwDBGrid;
    GroupBox4: TGroupBox;
    wwDBLookupCombo3: TwwDBLookupCombo;
    GroupBox6: TGroupBox;
    wwDBLookupCombo4: TwwDBLookupCombo;
    wwDBComboBox1: TwwDBComboBox;
    OD_spr_paramsID: TFloatField;
    OD_spr_paramsGR_NAME: TStringField;
    OD_spr_paramsPARNAME: TStringField;
    OD_spr_paramsCDTP: TFloatField;
    OD_spr_paramsVAL: TStringField;
    OD_spr_paramsPARN1: TFloatField;
    OD_spr_paramsPARVC1: TStringField;
    OD_spr_paramsPARDT1: TDateTimeField;
    OD_org2_olap: TOracleDataSet;
    procedure saveXML;
    procedure saveMap;
    procedure SetXMLDocNode2;
    procedure LoadCube(action_: Integer);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormEndDock(Sender, Target: TObject; X, Y: Integer);
    procedure FormStartDock(Sender: TObject;
      var DragObject: TDragDockObject);
    procedure CheckBox5Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure setAccess(rep_: String; have_current_: Integer;
      two_periods_: Integer);
    procedure Edit2Change(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure prepData;
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure SetSize(var_: Integer);
    procedure abfThreadComponent1Execute(Sender: TObject);
    procedure LoadSpr;
    procedure MemTableEh2AfterScroll(DataSet: TDataSet);
    procedure MemTableEh2SetFieldValue(MemTable: TCustomMemTableEh;
      Field: TField; var Value: Variant);
    procedure exp;
    procedure FormPaint(Sender: TObject);
    procedure edit_par;
    procedure wwDBComboBox1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure wwDBGrid1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure wwDBGrid1DblClick(Sender: TObject);
    procedure wwDBComboBox1DropDown(Sender: TObject);
    procedure wwDBComboBox1DblClick(Sender: TObject);
  private
    Doc, Doc1 : IXMLDomDocument;
    root, root1 : IXMLDOMElement;
    flag_: Integer;
    flag2_: Integer;
    obj_: string;
    objexcel_: string;
    err_, issum_, iscnt_, ishead_: Integer;
    fldsum_: String;
    curX_, curY_: Integer;
  public
    rep_cd_, period_str_, period_str2_, strr_, fname_, frx_fname_: String;
    allow_, max_level_, can_detail_, rep_id_, sel_many_, //have_date_,
      rep_type_, two_periods_,
      first_time_, expand_row_, expand_col_,
      show_paychk_, show_sel_org_, show_sel_oper_, show_deb_: Integer;
    OD_reports2: TOracleDataset;
    Cube_, Map_: TComponent;
    fr_: TComponent;
  end;

var
  Form_tree_objects: TForm_tree_objects;

implementation

uses Unit_Form_olap, Unit_Mainform, Unit_status, DM_module1,
  Unit_tree_par_edit;

{$R *.dfm}

procedure TForm_tree_objects.prepData;
begin
  OD_data.Active:=false;
  OD_data.SetVariable('cd_', rep_cd_);
  if wwDBLookupCombo4.LookupValue <> '' then
    OD_data.SetVariable('org_', wwDBLookupCombo4.LookupValue)
    else
    OD_data.SetVariable('org_', null);

  if wwDBLookupCombo3.LookupValue <> '' then
    OD_data.SetVariable('oper_', wwDBLookupCombo3.LookupValue)
    else
    OD_data.SetVariable('oper_', null);
 

  //Возможность детализации
  if can_detail_ = 1 then
    OD_data.SetVariable('det_', StrToInt(wwDBLookupCombo2.LookupValue));
  if rep_cd_ = '56' then
    OD_data.SetVariable('spk_id_', StrToInt(wwDBLookupCombo1.LookupValue));

{  if rep_cd_ = '69' then
  begin
  //Задолжники
    OD_data.SetVariable('n1_', ComboBox2.ItemIndex);
    if wwDBEdit1.Text <> '' then
      OD_data.SetVariable('n2_', StrToInt(wwDBEdit1.Text))
    else
      OD_data.SetVariable('n2_', 0);
  end;}

{  if rep_cd_ = '14' then
  begin
    //показывать ли промежуточное сальдо по месяцам
    if CheckBox2.Checked = true then
    begin
      OD_data.SetVariable('show_sal_', 1);
    end
    else
    begin
      OD_data.SetVariable('show_sal_', 0);
    end;
  end;}

{  if rep_cd_ = '54' then
  begin
    //учитывать ли текущую оплату в ведомости задолжники OLAP
    //используем ту же show_sal_
    if CheckBox3.Checked = true then
    begin
      OD_data.SetVariable('show_sal_', 1);
    end
    else
    begin
      OD_data.SetVariable('show_sal_', 0);
    end;
  end;}

  if CheckBox5.Checked = true then
  begin
    OD_data.SetVariable('mg_', null);
    OD_data.SetVariable('mg1_', null);
    OD_data.SetVariable('dat_',
      DBLookupComboBox5.KeyValue);
    OD_data.SetVariable('dat1_',
      DBLookupComboBox6.KeyValue);
  end
  else
  begin
    OD_data.SetVariable('dat_', null);
    OD_data.SetVariable('dat1_', null);
    OD_data.SetVariable('mg_',
      DBLookupComboBox5.KeyValue);
    if two_periods_ = 1 then
      OD_data.SetVariable('mg1_',
        DBLookupComboBox6.KeyValue)
    else
      OD_data.SetVariable('mg1_',
        DBLookupComboBox5.KeyValue);
  end;

{  if have_date_ = 1 then
  begin
    OD_data.SetVariable('dat2_',
       wwDBDateTimePicker1.Date);
    OD_data.SetVariable('dat3_',
       wwDBDateTimePicker2.Date);
  end;}

  if MemTableEh2.FieldByName('obj_level').AsInteger = 3 then
  begin
  if sel_many_ = 0 then
  begin
  //Старый вызов процедуры (выбор одного объекта)
    OD_data.SetVariable('reu_',
      MemTableEh2.FieldByName('reu').AsString);
    OD_data.SetVariable('kul_',
      MemTableEh2.FieldByName('kul').AsString);
    OD_data.SetVariable('nd_',
      MemTableEh2.FieldByName('nd').AsString);
    OD_data.SetVariable('var_', 3);
  end;
  end
  else if MemTableEh2.FieldByName('obj_level').AsInteger = 2 then
  begin
  if sel_many_ = 0 then
  begin
  //Старый вызов процедуры (выбор одного объекта)
    OD_data.SetVariable('reu_',
      MemTableEh2.FieldByName('reu').AsString);
    OD_data.SetVariable('var_', 2);
  end;
  end
  else if MemTableEh2.FieldByName('obj_level').AsInteger = 1 then
  begin
  if sel_many_ = 0 then
  begin
  //Старый вызов процедуры (выбор одного объекта)
    OD_data.SetVariable('trest_',
      MemTableEh2.FieldByName('trest').AsString);
    OD_data.SetVariable('var_', 1);
  end;
  end
  else if MemTableEh2.FieldByName('obj_level').AsInteger = 0 then
  begin
    OD_data.SetVariable('var_', 0);
  end;

  OD_data.Active:=true;

end;

procedure TForm_tree_objects.saveXML;
begin
  OD_reports2:=TOracleDataset.Create(nil);
  with OD_reports2 do
  begin
    Session:=OD_dat1.Session;
    SQL.Text:='select l.rowid, l.xmltext from scott.rep_levels l '+
        'where l.fk_rep_id=:id_ and l.level_id=:level_id_';
    //Если поменять ниже две строчки местами, нарушиться логика программы
    //Я в шоке!
    DeclareVariable('id_', otInteger);
    DeclareVariable('level_id_', otInteger);

    SetVariable('id_', Form_tree_objects.rep_id_);

    //Может ли детализироваться?
    if can_detail_ = 0 then
      SetVariable('level_id_', MemTableEh2.FieldByName('obj_level').AsInteger)
    else
      SetVariable('level_id_', StrToInt(wwDBLookupCombo2.LookupValue));
    Open;

    Active:=true;
  end;
  Doc := CreateComObject(CLASS_DOMDOCUMENT30) as IXMLDomDocument;
  Doc.async := False;

  Map_ := Form_olap.FindComponent('PivotMap'+rep_cd_);
  root := Doc.createElement('PivotMap.'+TPivotMap(Map_).Name);
  TPivotMap(Map_).SavetoXML(root, True);
  Doc.appendChild(root);

  with OD_reports2 do
  begin
    Edit;
    FieldByName('xmltext').AsString:=Doc.xml;
    Post;
    Active:=false;
    Close;
    Free;
  end;
end;

procedure TForm_tree_objects.saveMap;
begin
  Doc1 := CreateComObject(CLASS_DOMDOCUMENT30) as IXMLDomDocument;
  Doc1.async := False;

  root1 := Doc1.createElement('PivotMap.'+TPivotMap(Map_).Name);
  try
    TPivotMap(Map_).SavetoXML(root1, True);
  except
  end;

end;

Procedure TForm_tree_objects.SetXMLDocNode2;
var
   Node, Node2, NodeChild2: IXMLDOMNode;
   a: Integer;
begin
   Node := root1.SelectSingleNode('//Rows');
   with Node do
   while hasChildNodes do
     removeChild( firstChild );

   Node2 := root.SelectSingleNode('//Rows');
   for a := 0 to Node2.childNodes.length-1 do
   begin
     NodeChild2 := Node2.childNodes.item[0];
     Node.appendChild(NodeChild2);
   end;
end;

procedure TForm_tree_objects.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action:=caFree;
end;

procedure TForm_tree_objects.LoadCube(action_: Integer);
var
  str1_: String;
begin
  //Путь выгрузки
  str1_:=DataModule1.OraclePackage1.CallStringFunction
       ('scott.Utils.get_str_param', ['Путь1']);
 if allow_ = 0 then
  begin
   exit; //выполняется загрузка куба
  end;

 //Сохраняем выбор пользователя объектов для отчёта (домов в частности)
 if MemTableEh2.State <> dsBrowse then
    MemTableEh2.Post;

 if (DBLookupComboBox5.KeyValue = null) or
   ((DBLookupComboBox6.KeyValue = null) and (two_periods_ = 1)) then
 begin
  msg2('Не выбран период отчета!','Внимание!',
    MB_OK+MB_ICONSTOP);
  SetSize(1);
  Exit;
 end;

 if CheckBox5.Checked = True then
 begin
   if DBLookupComboBox5.KeyValue = DBLookupComboBox6.KeyValue then
      period_str_:='за '+OD_dat1.FieldByName('mg1').AsString
    else
      period_str_:='за период с '+OD_dat1.FieldByName('mg1').AsString+' по '+
         OD_dat2.FieldByName('mg1').AsString;
 end
 else
 begin
   if DBLookupComboBox5.KeyValue = DBLookupComboBox6.KeyValue then
      period_str_:='за '+OD_mg1.FieldByName('mg2').AsString
    else
      period_str_:='за период с '+OD_mg1.FieldByName('mg1').AsString+' по '+
         OD_mg2.FieldByName('mg1').AsString;
 end;

{ if have_date_ = 1 then
 begin
 if wwDBDateTimePicker1.Date = wwDBDateTimePicker2.Date then
    period_str2_:='за '+wwDBDateTimePicker1.Text
  else
    period_str2_:='за период с '+wwDBDateTimePicker1.Text+' по '+
       wwDBDateTimePicker2.Text;
 end;}

 if (rep_cd_='56') and (wwDBLookupCombo1.LookupValue = '')
    then
 begin
  msg2('Не выбрана категория льготы!','Внимание!',
    MB_OK+MB_ICONSTOP);
  SetSize(1);
  Exit;
 end;


 if ((DBLookupComboBox5.KeyValue >
   DBLookupComboBox6.KeyValue) and (two_periods_ = 1)) then
 begin
  msg2('Некорректный период отчета!','Внимание!',
    MB_OK+MB_ICONSTOP);
  SetSize(1);
  Exit;
 end;

 if (can_detail_ =1) and (wwDBLookupCombo2.LookupValue='') then
 begin
   msg2('Не установлен уровень детализации!','Внимание!',
    MB_OK+MB_ICONSTOP);
   SetSize(1);
   Exit;
 end;

  OD_reports2:=TOracleDataset.Create(nil);
  with OD_reports2 do
  begin
  Session:=OD_dat1.Session;
  SQL.Text:='select l.rowid, l.xmltext, '+
      'r.name, nvl(r.fk_type,0) as fk_type '+
      'from scott.rep_levels l, scott.reports r '+
      'where r.id=:id_ and r.id=l.fk_rep_id and l.level_id=:level_id_';
  DeclareVariable('id_', otInteger);
  DeclareVariable('level_id_', otInteger);
  try
    ClearVariables;
    SetVariable('id_', rep_id_);
    //Может ли детализироваться?
    if can_detail_ = 0 then
      SetVariable('level_id_', MemTableEh2.FieldByName('obj_level').AsInteger)
    else
      SetVariable('level_id_', StrToInt(wwDBLookupCombo2.LookupValue));
    Open;
    strr_ := FieldByName('xmltext').AsString;

    //Отчет выполнен по оптимизированной технологии "star" (связка таблиц звездой)
    if  rep_cd_ = '13' then
      Form_olap.rep_name_:=FieldByName('name').AsString
    else
      Form_olap.rep_name_:=FieldByName('name').AsString;

    if two_periods_ =1 then
    begin
      Form_olap.Caption:=Form_olap.rep_name_+
          ' за период с '+DBLookupComboBox5.Text+' по '+DBLookupComboBox6.Text;
      Form_olap.rep_name_:=Form_olap.rep_name_+
          ' за период с '+DBLookupComboBox5.Text+' по '+DBLookupComboBox6.Text;
    end
    else
    begin
      Form_olap.Caption:=Form_olap.rep_name_+
          ' за '+DBLookupComboBox5.Text;
      Form_olap.rep_name_:=Form_olap.rep_name_+
          ' за '+DBLookupComboBox5.Text;
    end;

  finally
    Close;
    Free;
  end;
  end;


 //наименование Объекта в отчёте
 obj_:=''''+', по '+MemTableEh2.FieldByName('name').AsString+'''';
 if MemTableEh2.FieldByName('obj_level').AsInteger = 3 then
  objexcel_:=', по дому '+MemTableEh2.FieldByName('name').AsString
 else if MemTableEh2.FieldByName('obj_level').AsInteger in [0,1,2] then
  objexcel_:=', по Организации '+MemTableEh2.FieldByName('name').AsString;

 if (MemTableEh2.FieldByName('obj_level').AsInteger <=
  max_level_) and (rep_type_=0) then
 begin
 //OLAP отчет
 if FF('Form_olap', 0) =1 then
 begin
  Form_olap.PVDimToolBar1.Visible:=true;
  Form_olap.PVColToolBar1.Visible:=true;
  Form_olap.PVRowToolBar1.Visible:=true;
  Form_olap.PivotGrid1.Visible:=true;
  Form_olap.PVMeasureToolBar1.Visible:=true;

  try
    DataModule1.OraclePackage1.CallProcedure
        ('scott.drb1_Сохранить_шаблон', [parNone]);
  except
  begin
    Form_olap.Button2.Visible:=true;
  end
  end;
  
  Form_olap.Button3.Visible:=true;

  Cube_ := Form_olap.FindComponent('PivotCube'+rep_cd_);
  Map_ := Form_olap.FindComponent('PivotMap'+rep_cd_);

  if action_ = 0 then
  begin
    //Загрузить данные
    TPivotCube(Cube_).Active := False;
  end
  else
  begin
    //Добавить данные
    TPivotCube(Cube_).CanUpgrade:=true;
  end;

  Form_olap.PivotGrid1.Map := TPivotMap(Map_);
  Form_olap.PVDimToolBar1.Map := TPivotMap(Map_);
  Form_olap.PVColToolBar1.Map := TPivotMap(Map_);
  Form_olap.PVRowToolBar1.Map := TPivotMap(Map_);
  Form_olap.PVMeasureToolBar1.Map := TPivotMap(Map_);

  //поиск выбранного элемента
  if sel_many_ = 0 then
  begin
    if MemTableEh2.Locate('sel', 0, [loCaseInsensitive]) =False then
    begin
     msg2('Не найден выбранный элемент!', 'Внимание!', MB_OK+MB_ICONERROR);
     Exit;
    end;
  end;

  //подготовка данных
  Form_olap.Button4.Visible:=true;
  Form_olap.Update;
  prepData;

  if OD_data.RecordCount = 0 then
      msg2('Нет информации!','Внимание!',
        MB_OK+MB_ICONSTOP)
  else
  begin
  setSize(0);
  if action_ = 0 then
    begin
      //Загрузить данные
      TPivotCube(Cube_).Active := True;
    end
    else
    begin
      //Добавить данные
      TPivotCube(Cube_).Build;
    end;
  end;


  if (DataModule1.OraclePackage1.CallIntegerFunction
       ('scott.UTILS.getS_bool_param', ['REP_LOAD_TPL'])=1)
        then
  begin
  if strr_ <> '' then
  begin
    Doc := CreateComObject(CLASS_DOMDOCUMENT30) as IXMLDomDocument;
    Doc.async := False;
    Doc.loadXML(Form_tree_objects.strr_);
    root := Doc.documentElement;

    try
     TPivotMap(Map_).LoadFromXML(root);
    except
      msg2('Ошибка при загрузке XML!','Внимание!',
        MB_OK+MB_ICONERROR)
    end;
  end
  else
  begin
    msg2('Отсутствует XML для отчета, необходимо создать!','Внимание!',
      MB_OK+MB_ICONERROR)
  end;
    TPivotMap(Map_).RefreshData(TRUE);
  end;

  //Раскрывать ли ветки PivotGrid-а
  if (expand_row_ = 1)  and (expand_col_ = 1) then
    Form_olap.PivotGrid1.ExpandAll(True, True)
  else if (expand_row_ = 1)  and (expand_col_ = 0) then
    Form_olap.PivotGrid1.ExpandAll(True, False)
  else if (expand_row_ = 0)  and (expand_col_ = 1) then
    Form_olap.PivotGrid1.ExpandAll(False, True)
  else if (expand_row_ = 0)  and (expand_col_ = 0) then
    Form_olap.PivotGrid1.ExpandAll(False, False);

  end;
  Form_olap.Button4.Visible:=false;
  Form_olap.Update;

  end
  else if (MemTableEh2.FieldByName('obj_level').AsInteger <=
  max_level_) and (rep_type_=1) then
 begin
   //Fastreport отчет
   fr_ := Form_olap.FindComponent('frxReport'+rep_cd_);

   //подготовка данных
   Form_olap.Button4.Visible:=true;
   prepData;
   Form_olap.Button4.Visible:=false;

   if OD_data.RecordCount = 0 then
   begin
      msg2('Нет информации!','Внимание!',
        MB_OK+MB_ICONSTOP);
   SetSize(1);
   end
   else
   begin
    Application.CreateForm(TForm_status, Form_status);
    Form_status.Update;
    if frx_fname_ <> '' then
    begin
      //отчет, базирующийся на одном, универсальном датасете
      fr_ := Form_olap.FindComponent('frxReport_base');
      try
        TfrxReport(fr_).LoadFromFile(Form_main.exepath_+'\'+frx_fname_, true);
      except
        msg2('Не найден файл отчета '+frx_fname_,'Внимание!',
          MB_OK+MB_ICONSTOP);
        Exit;
      end;
    end;

    if fr_ = nil then
    begin
      msg2('Не найден отчет '+'frxReport'+rep_cd_,'Внимание!',
        MB_OK+MB_ICONSTOP);
      Exit;
    end;

    //наименование Объекта в отчёте
    TfrxReport(fr_).Variables['obj_']:=obj_;

    //Установить период
    TfrxReport(fr_).Variables['period_']:=''''+period_str_+'''';

    if (rep_cd_ = '64') then
    begin
      //Установить период
      TfrxReport(fr_).Variables['dt1_']:=DataModule1.OraclePackage1.CallDateFunction
          ('scott.UTILS.getS_date_param', ['REP_DT_BR1']);;
      TfrxReport(fr_).Variables['dt2_']:=DataModule1.OraclePackage1.CallDateFunction
          ('scott.UTILS.getS_date_param', ['REP_DT_BR2']);;
    end;

    if (rep_cd_ = '73') or (rep_cd_ = '74') then
    begin
      //Установить период
      TfrxReport(fr_).Variables['dt1_']:=DataModule1.OraclePackage1.CallDateFunction
          ('scott.UTILS.getS_date_param', ['REP_DT_PROP1']);;
      TfrxReport(fr_).Variables['dt2_']:=DataModule1.OraclePackage1.CallDateFunction
          ('scott.UTILS.getS_date_param', ['REP_DT_PROP2']);;
      //Установить параметр отчета
      if DataModule1.OraclePackage1.CallIntegerFunction
           ('scott.UTILS.getS_list_param', ['REP_PROP_VAR']) = 0 then
        TfrxReport(fr_).Variables['var_']:=QuotedStr('прописанным')
      else
        TfrxReport(fr_).Variables['var_']:=QuotedStr('выписанным');
    end;
    {    if have_date_= 1 then
    begin
    //Установить период2
      TfrxReport(fr_).Variables['period2_']:=''''+period_str2_+'''';
    end;}

    if rep_cd_ = '69' then
    begin
      //Установить кол-во месяцев или рублей
      if (DataModule1.OraclePackage1.CallIntegerFunction
         ('scott.UTILS.getS_list_param', ['REP_DEB_VAR'])=0) then
        TfrxReport(fr_).Variables['txt_']:=QuotedStr(FloatToStr(DataModule1.OraclePackage1.CallFloatFunction
         ('scott.UTILS.getS_int_param', ['REP_DEB_MONTH'])))
      else
        TfrxReport(fr_).Variables['txt_']:=QuotedStr(FloatToStr(DataModule1.OraclePackage1.CallFloatFunction
         ('scott.UTILS.getS_int_param', ['REP_DEB_SUMMA'])));
    end;

    if rep_cd_ = '61' then
    begin
      //наименование операции в отчёте
      if wwDBLookupCombo4.LookupValue='' then
      begin
        TfrxReport(fr_).Variables['oper_']:=''''+', по всем операциям'+'''';
      end
      else
      begin
        TfrxReport(fr_).Variables['oper_']:=''''+', по операции: '+wwDBLookupCombo4.Text+'''';
      end;

      //наименование организации в отчёте
      if wwDBLookupCombo3.LookupValue <> '' then
      begin
        TfrxReport(fr_).Variables['org_']:=''''+', по организации: '+wwDBLookupCombo3.Text+'''';
      end
      else
      begin
        TfrxReport(fr_).Variables['org_']:=''''+', по всем организациям'+'''';
      end;
    end;


    TfrxReport(fr_).PrepareReport(true);
    Form_status.close;
    Form_main.Panel2.Width:=0;
    TfrxReport(fr_).ShowPreparedReport;
    SetSize(1);

    
   if FF('Form_olap', 0) =1 then
   begin
     Form_olap.PVDimToolBar1.Visible:=false;
     Form_olap.PVColToolBar1.Visible:=false;
     Form_olap.PVRowToolBar1.Visible:=false;
     Form_olap.PivotGrid1.Visible:=false;
     Form_olap.PVMeasureToolBar1.Visible:=false;
     Form_olap.Button2.Visible:=false;
     Form_olap.Button3.Visible:=false;
   end;
   end;

 end
 else if (MemTableEh2.FieldByName('obj_level').AsInteger <=
  max_level_) and (rep_type_=2) then
 begin
   //подготовка данных
   Form_olap.Button4.Visible:=true;
   prepData;
   Form_olap.Button4.Visible:=false;

   if OD_data.RecordCount = 0 then
   begin
      msg2('Нет информации!','Внимание!',
        MB_OK+MB_ICONSTOP);
      SetSize(1);
   end
   else
   begin
    Application.CreateForm(TForm_status, Form_status);
    Form_status.Update;
   //Выгрузка в DBF
    err_:=exp_to_dbf(OD_data, str1_+fname_);
    Form_status.close;
    SetSize(1);
    if err_ = 0 then
        msg2('Выгружено в '+str1_+fname_, 'Внимание', MB_OK+MB_ICONINFORMATION)
      else
        msg2('Произошли ошибки во время выгрузки файла', 'Внимание', MB_OK+MB_ICONINFORMATION);
   end;
 end
 else if (MemTableEh2.FieldByName('obj_level').AsInteger <=
  max_level_) and (rep_type_=3) then
 begin
   //подготовка данных
   Form_olap.Button4.Visible:=true;
   prepData;
   Form_olap.Button4.Visible:=false;

   if OD_data.RecordCount = 0 then
   begin
      msg2('Нет информации!','Внимание!',
        MB_OK+MB_ICONSTOP);
      SetSize(1);
   end
   else
   begin
    Application.CreateForm(TForm_status, Form_status);
    Form_status.Update;
   //Выгрузка в TXT
    err_:=exp_to_txt(OD_data, str1_, fname_, fldsum_, issum_, iscnt_, ishead_);
    Form_status.close;
    SetSize(1);
    if err_ = 0 then
        msg2('Выгружено в '+str1_+fname_, 'Внимание', MB_OK+MB_ICONINFORMATION)
      else
        msg2('Произошли ошибки во время выгрузки файла', 'Внимание', MB_OK+MB_ICONINFORMATION);
   end;
 end
 else
 begin
    msg2('Отсутствует уровень детализации!','Внимание!',
      MB_OK+MB_ICONSTOP)
 end;
end;

procedure TForm_tree_objects.FormEndDock(Sender, Target: TObject; X,
  Y: Integer);
begin
  if Form_main.Panel2.DockClientCount = 0 then
    begin
     SetSize(0);
    end
    else
    begin
     SetSize(1);
    end;
end;

procedure TForm_tree_objects.FormStartDock(Sender: TObject;
  var DragObject: TDragDockObject);
begin
  SetSize(1);
end;

procedure TForm_tree_objects.CheckBox5Click(Sender: TObject);
begin
   DBLookupComboBox5.KeyValue := null;
   DBLookupComboBox6.KeyValue := null;
  if CheckBox5.Checked = true then
   begin
   DS_mg1.DataSet := OD_dat1;
   DS_mg2.DataSet := OD_dat2;
   end
  else
   begin
   DS_mg1.DataSet := OD_mg1;
   DS_mg2.DataSet := OD_mg2;
   end;
end;

procedure TForm_tree_objects.setAccess(rep_: String; have_current_: Integer;
    two_periods_: Integer);
begin
  SetSize(1);
  //Если форма не загружает и не загружала справочник, загрузить
  if (Form_Main.flag3_=0) and (flag2_ = 0) then
    LoadSpr;

  first_time_:=1;
  allow_:=1;
  Form_tree_objects.two_periods_:=two_periods_;
  Form_tree_objects.rep_cd_:=rep_;

  //Параметры отчета
  OD_reports2:=TOracleDataset.Create(nil);
  with OD_reports2 do
  begin
  Session:=OD_dat1.Session;
  SQL.Text:='select r.id, r.maxlevel, nvl(r.can_detail,0) as can_detail,'+
      'r.name, nvl(r.fk_type,0) as fk_type, nvl(r.expand_row,0) as expand_row, '+
      'nvl(r.expand_col,0) as expand_col, '+
      'nvl(r.show_sel_org,0) as show_sel_org, nvl(r.show_sel_oper,0) as show_sel_oper, '+
      'nvl(r.sel_many,0) as sel_many, '+
      'nvl(r.show_paychk,0) as show_paychk, '+
      'nvl(r.show_deb,0) as show_deb, '+
      'nvl(r.have_date,0) as have_date, '+
      'r.frx_fname, '+
      'r.fname, nvl(r.iscnt,0) as iscnt, nvl(r.issum,0) as issum, nvl(r.ishead,0) as ishead, r.fldsum '+
      'from scott.reports r '+
      'where r.cd=:cd_';
  DeclareVariable('cd_', otString);
  try
    ClearVariables;
    SetVariable('cd_', rep_);
    Open;
    can_detail_:=FieldByName('can_detail').AsInteger;
    max_level_:=FieldByName('maxlevel').AsInteger;
    sel_many_:=FieldByName('sel_many').AsInteger;
//    have_date_:=FieldByName('have_date').AsInteger;
    rep_type_:=FieldByName('fk_type').AsInteger;
    expand_row_:=FieldByName('expand_row').AsInteger;
    expand_col_:=FieldByName('expand_col').AsInteger;
    show_sel_org_:=FieldByName('show_sel_org').AsInteger;
    show_sel_oper_:=FieldByName('show_sel_oper').AsInteger;
    show_paychk_:=FieldByName('show_paychk').AsInteger;
    show_deb_:=FieldByName('show_deb').AsInteger;
    iscnt_:=FieldByName('iscnt').AsInteger;
    issum_:=FieldByName('issum').AsInteger;
    ishead_:=FieldByName('ishead').AsInteger;
    fldsum_:=FieldByName('fldsum').AsString;
    rep_id_:=FieldByName('id').AsInteger;
    fname_:=FieldByName('fname').AsString;
    frx_fname_:=FieldByName('frx_fname').AsString;
  finally
    Close;
    Free;
  end;
  end;

  MemTableEh2.Filter:='obj_level<='+inttostr(max_level_);
  MemTableEh2.Filtered:=true;

  //изменить наименование кнопки в соответствии с ф-цией отчета
  if (rep_type_ = 2) or (rep_type_ = 3) then
  begin
    Button3.Caption:='Выгрузить';
    Button2.Enabled:=false;
  end
  else
  begin
    Button3.Caption:='Выбрать';
    Button2.Enabled:=true;
  end;

  //показать/скрыть поиск по адресу при соотв. уровне детализ.
  if max_level_ >= 3 then
  begin
  Label3.Visible:=True;
  Label4.Visible:=True;
  Edit2.Visible:=True;
  Edit3.Visible:=True;
  end
  else
  begin
  Label3.Visible:=False;
  Label4.Visible:=False;
  Edit2.Visible:=False;
  Edit3.Visible:=False;
  end;

  //показать/скрыть выбор организации
  if show_sel_org_ = 1 then
  begin
//    Label10.Visible:=True;
//    wwDBLookupCombo3.Visible:=True;
    GroupBox6.Visible:=True;
  end
  else
  begin
//    Label10.Visible:=False;
//    wwDBLookupCombo3.Visible:=False;
    GroupBox6.Visible:=False;
  end;

  //показать/скрыть выбор дополнительного поля даты
{  if have_date_ = 1 then
  begin
    GroupBox1.Visible:=True;
    Label9.Visible:=True;
    Label11.Visible:=True;
    wwDBDateTimePicker1.Visible:=True;
    wwDBDateTimePicker2.Visible:=True;
  end
  else
  begin
    GroupBox1.Visible:=False;
    Label9.Visible:=False;
    Label11.Visible:=False;
    wwDBDateTimePicker1.Visible:=False;
    wwDBDateTimePicker2.Visible:=False;
  end;                                 }

  //показать/скрыть выбор операции
  if show_sel_oper_ = 1 then
  begin
    GroupBox4.Visible:=True;
//    Label8.Visible:=True;
//    wwDBLookupCombo4.Visible:=True;
  end
  else
  begin
    GroupBox4.Visible:=False;
//    Label8.Visible:=False;
//    wwDBLookupCombo4.Visible:=False;
  end;

  //Возможность детализации
  if can_detail_ = 1 then
  begin
  GroupBox5.Visible:=True;
//    Label6.Visible:=True;
//    wwDBLookupCombo2.Visible:=True;

    with OD_level do
    begin
    Active:=false;
    SetVariable('id',
      MemTableEh2.FieldByName('obj_level').AsInteger);
    SetVariable('max_level',
      max_level_);
    Active:=true;
    end;
    wwDBLookupCombo2.LookupValue:=
       MemTableEh2.FieldByName('obj_level').AsString;
  end
  else
  begin
    GroupBox5.Visible:=False;
//    Label6.Visible:=False;
//    wwDBLookupCombo2.Visible:=False;
  end;

  with OD_spr_params do
  begin
  Active:=false;
  SetVariable('cd_', rep_);
  Active:=true;
  end;
  if OD_spr_params.RecordCount=0 then
     GroupBox1.Visible:=False
   else
     GroupBox1.Visible:=True;


  //два периода в отчёте (с ... по)
  if two_periods_ = 1 then
  begin
    DBLookupComboBox6.Visible:=true;
    Label1.Caption:='С';
    Label2.Visible:=true;
    DBLookupComboBox5.ListField:='MG1';
  end
  else
  begin
    DBLookupComboBox6.Visible:=false;
    Label1.Caption:='За';
    Label2.Visible:=false;
    DBLookupComboBox5.ListField:='MG2';
  end;

  //для оборотки показываем галку промежуточного сальдо
{  if rep_ = '14' then
    CheckBox2.Visible:=True
  else
    CheckBox2.Visible:=False;}

  //для задолжников OLAP показываем галку учит.тек.опл
{  if show_paychk_ = 1 then
    CheckBox3.Visible:=True
  else
    CheckBox3.Visible:=False;}

  //для задолжников FR показываем условие выборки задолжности
{  if show_deb_ = 1 then
    GroupBox3.Visible:=True
  else
    GroupBox3.Visible:=False;}

  //Списки льготников
  if rep_ = '56' then
  begin
    GroupBox7.Visible:=True;
//    wwDBLookupCombo1.Visible:=True;
//    Label5.Visible:=True;
    OD_spk.Active:=True;
  end
  else
  begin
    GroupBox7.Visible:=False;
//    wwDBLookupCombo1.Visible:=False;
//    Label5.Visible:=False;
    OD_spk.Active:=False;
  end;

  if have_current_ = 1 then
  begin
    CheckBox5.Enabled:=true;
  end
  else
  begin
    CheckBox5.Enabled:=false;
    CheckBox5.Checked:=false;
  end;

  with OD_mg1 do
  begin            
    active:=false;
    SetVariable('id_', rep_id_);
    active:=true;
  end;

  with OD_mg2 do
  begin
    active:=false;
    SetVariable('id_', rep_id_);
    active:=true;
  end;

  with OD_dat1 do
  begin
    active:=false;
    SetVariable('id_', rep_id_);
    active:=true;
  end;

  with OD_dat2 do
  begin
    active:=false;
    SetVariable('id_', rep_id_);
    active:=true;
  end;

  with OD_spr_params do
  begin
    active:=false;
//    SetVariable('id_', rep_id_);
    active:=true;
  end;

  Panel1.AutoSize:=True;
end;

procedure TForm_tree_objects.FormCreate(Sender: TObject);
begin
  //подготовка справочника к работе
  flag_:=0;
  allow_:=1;
  OD_oper.Active:=True;
  OD_org.Active:=True;
  OD_org_olap.Active:=True;
  OD_org2_olap.Active:=True;
  OD_usl_olap.Active:=True;
  OD_uslm_olap.Active:=True;
  OD_trest_olap.Active:=True;
  OD_reu_olap.Active:=True;
  OD_status_olap.Active:=True;
  OD_sch_olap.Active:=True;
  OD_psch_olap.Active:=True;
  OD_spul_olap.Active:=True;
end;

procedure TForm_tree_objects.BitBtn1Click(Sender: TObject);
begin
  Form_main.Panel2.Width:=4;
end;

procedure TForm_tree_objects.Edit2Change(Sender: TObject);
var
  sqlStr: String;
begin
    sqlStr:='obj_level<='+inttostr(max_level_);
    if (Edit1.Text = '') and (Edit2.Text = '') and (Edit3.Text = '') then
    begin
      MemTableEh2.TreeList.FullCollapse();
    end
    else
    begin
      if (Edit1.Text <> '') then
      begin
        sqlStr:=sqlStr+' and (name_tr LIKE ''%'+AnsiUpperCase(Edit1.Text)+'%'')';
      end;

      if (Edit2.Text <> '') then
      begin
        sqlStr:=sqlStr+' and (street LIKE ''%'+AnsiUpperCase(Edit2.Text)+'%'')';
      end;

      if (Edit3.Text <> '') then
      begin
        sqlStr:=sqlStr+'and (nd1 LIKE ''%'+AnsiUpperCase(Edit3.Text)+'%'')';
      end;
      MemTableEh2.TreeList.FullExpand();
    end;
      MemTableEh2.Filter:=sqlStr;
      MemTableEh2.Filtered:=true;
end;

procedure TForm_tree_objects.N1Click(Sender: TObject);
begin
  MemTableEh2.TreeList.FullCollapse;
end;

procedure TForm_tree_objects.Button2Click(Sender: TObject);
begin
  LoadCube(1);
end;

procedure TForm_tree_objects.Button3Click(Sender: TObject);
begin
  LoadCube(0);
end;

procedure TForm_tree_objects.SetSize(var_: Integer);
begin
  //Если форма всё еще загружает справочник, выйти
  if flag2_ <> 0 then
  begin
    msg2('Идёт загрузка справочников, ждите', '', MB_OK+MB_ICONINFORMATION);
    Exit;
  end;

  //Размер панели дерева объектов
  if var_=1 then
    Form_Main.Panel2.Width:=305
  else if var_=0 then
    Form_Main.Panel2.Width:=2
  else if var_=2 then
  begin
    if Form_Main.Panel2.Width <= 2 then
      Form_Main.Panel2.Width:=305
    else
    Form_Main.Panel2.Width:=2;
  end;
end;

procedure TForm_tree_objects.LoadSpr;
begin
  //флаг загрузки справочников
  flag2_:=1;
  Panel2.Visible:=True;
  Update;
  DataModule1.OraclePackage1.CallProcedure('scott.utils.prep_users_tree',
   [parNone]);
  OD_tree_objects.Active:=true;

  MemTableEh2.FetchRecords(4000);
  MemTableEh2.FetchRecords(4000);
  MemTableEh2.FetchRecords(4000);
  MemTableEh2.Open;

  Panel2.Visible:=False;

  //сбросить флаг загрузки справочников
  flag2_:=0;
  OD_data.Active:=false;
  //Справочники загружены
  Form_Main.flag3_:=1;
end;

procedure TForm_tree_objects.abfThreadComponent1Execute(Sender: TObject);
begin
   LoadSpr;
end;

procedure TForm_tree_objects.MemTableEh2AfterScroll(DataSet: TDataSet);
var
  str_: String;
begin
  if FF('Form_tree_objects', 0) = 1 then
  begin
    if (Form_tree_objects.can_detail_ = 1) then
    begin
    str_:=wwDBLookupCombo2.LookupValue;
    with OD_level do
    begin
    Active:=false;
    SetVariable('id',
      MemTableEh2.FieldByName('OBJ_LEVEL').AsInteger);
    Active:=true;
    SearchRecord('level_id', StrToInt(str_),
      [srFromBeginning]);
    wwDBLookupCombo2.LookupValue:=
       FieldByName('level_id').AsString;
    end;
    end;
  end;
end;

procedure sel_tree_obj(trnode: TMemRecViewEh; sel_: Integer);
var
  a: Integer;
begin
  //Рекурсивная функция отметки всех нисходящих по иерархии объектов
  for a:=0 to trnode.NodesCount-1 do
  begin
    trnode.NodeItems[a].Rec.DataValues['sel', dvvCurValueEh]:=sel_;
    sel_tree_obj(trnode.NodeItems[a], sel_);
  end;
end;

procedure desel_all_obj(tmem: TMemTableEh; id_: Integer);
var
  a: Integer;
begin
  //функция снятия отметки всех объектов
  for a:=0 to tmem.rec.RecordsList.Count-1 do
  begin
    if tmem.rec.RecordsList.Rec[a].DataValues['id', dvvCurValueEh] <> id_ then
      tmem.rec.RecordsList.Rec[a].DataValues['sel', dvvCurValueEh]:=1;
//    ShowMessage(tmem.rec.RecordsList.Rec[a].DataValues['name', dvvCurValueEh]);
  end;
end;

procedure TForm_tree_objects.MemTableEh2SetFieldValue(
  MemTable: TCustomMemTableEh; Field: TField; var Value: Variant);
begin
  if flag_ = 0 then
  begin
  flag_:=1;
    //Обновить само значение в поле
    MemTableEh2.FieldByName('sel').AsInteger:=VarAsType(Value, varInteger);
    if Form_tree_objects.sel_many_ <> 0 then
    begin
      //Обновить значения в дочерних объектах
      sel_tree_obj(MemTableEh2.TreeNode, VarAsType(Value, varInteger));
    end
    else
    begin
      //Обновить значения в во всех объектах (деселект всех)
      desel_all_obj(MemTableEh2, MemTableEh2.FieldByName('id').AsInteger);
    end;
    DBGridEh1.Refresh;
  flag_:=0;
  end;
end;

procedure TForm_tree_objects.exp;
var
   Excel : OleVariant;
begin
//Экспорт в Excel
  Form_olap.PivotGrid1.ExportToExcel(Excel, true, true, true,
    Form_olap.rep_name_+objexcel_);
end;

procedure TForm_tree_objects.FormPaint(Sender: TObject);
var
  height_:Integer;
begin
//Высота панели выбора параметров
  height_:=0;
  if Panel3.Visible then
    height_:=height_+Panel3.Height;
  if GroupBox2.Visible then
    height_:=height_+GroupBox2.Height;

{  if GroupBox3.Visible then
    height_:=height_+GroupBox3.Height;
 }
  if GroupBox1.Visible then
    height_:=height_+GroupBox1.Height;

  if GroupBox4.Visible then
    height_:=height_+GroupBox4.Height;
  if GroupBox5.Visible then
    height_:=height_+GroupBox5.Height;
  if GroupBox6.Visible then
    height_:=height_+GroupBox6.Height;
  if GroupBox7.Visible then
    height_:=height_+GroupBox7.Height;

 Panel1.Height:=height_;
 Update;
end;

procedure TForm_tree_objects.edit_par;
var
  id_: Integer;
begin
  Application.CreateForm(TForm_tree_par_edit, Form_tree_par_edit);
  Form_tree_par_edit.Top:=curY_+
    Form_Main.Top+Panel1.Top+Form_tree_objects.Top+
    GroupBox1.Top+wwDBGrid1.Top;
  Form_tree_par_edit.Left:=curX_+
    Form_Main.Left+Panel1.Left+Form_tree_objects.Left+
    GroupBox1.Left+wwDBGrid1.Left;
  Form_tree_par_edit.SetAccess(OD_spr_params);
  Form_tree_par_edit.ShowModal;

  id_:=OD_spr_params.FieldByName('id').AsInteger;
  OD_spr_params.Active:=False;
  OD_spr_params.Active:=True;
  OD_spr_params.Locate('id', id_, []);
  wwDBGrid1.SetFocus;
  wwDBGrid1.Repaint;

end;

procedure TForm_tree_objects.wwDBComboBox1KeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
   edit_par;
end;

procedure TForm_tree_objects.wwDBGrid1KeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  if (key = VK_Return) and
    (wwDBGrid1.GetActiveCol=GetGridColumnByName(wwDBGrid1, 'Val')+1) then
      edit_par;
end;

procedure TForm_tree_objects.wwDBGrid1DblClick(Sender: TObject);
begin
  edit_par;
end;

procedure TForm_tree_objects.wwDBComboBox1DropDown(Sender: TObject);
begin
  edit_par;
  Abort;
end;

procedure TForm_tree_objects.wwDBComboBox1DblClick(Sender: TObject);
begin
  edit_par;
end;

end.
